Processes

1. Starting a Process
   When you start a process (run a command), there are two ways you can run it
   a. Foreground Processes
      By default, every process that you start runs in the foreground. It gets its
      input from the keyboard and sends its output to the screen.  
      Contoh :
      $ ls file*.txt
   b. Background Processes
      A background process runs without being connected to your keyboard. If the
      background process requires any keyboard input, it waits.
      
      The advantage of running a process in the background is that you can run
      other commands; you do not have to wait until it completes to start another!
      
      The simplest way to start a background process is to add an ampersand (&) at
      the end of the command.
      Contoh :
      $ ls file*.txt &
      
2. Listing Running Processes
   $ps
   PID       TTY      TIME        CMD
   1835     ttyp3    00:00:00    bash
   1878     ttyp3    00:00:00    ps
   
   $ps -f
   UID      PID  PPID C STIME    TTY   TIME CMD
   rahul   6738 3662 0 10:23:03 pts/6 0:00 first_one
   rahul   6739 3662 0 10:22:54 pts/6 0:00 second_one
   
   Description :
   1. UID
      User ID that this process belongs to (the person running it)
   2. PID
      Process ID
   3. PPID 
      Parent process ID (the ID of the process that started it)
   4. C
      CPU utilization of process
   5. STIME
      Process start time
   6. TTY
      Terminal type associated with the process
   7. TIME 
      CPU time taken by the process
   8. CMD
      The command that started this process
      
3. Stopping Processes
   - CTRL + C keystroke (the default interrupt character) will exit the command.
     This works when the process is running in the foreground mode.
   - If a process is running in the background, you should get its Job ID using
     the ps command. After that, you can use the kill command to kill the process 
     
   Contoh :
   $ ps -f (too see the processes run in the background)
   $ kill 4567 <---- 4567(PID)
   $ kill -9 4567 (Gunakan cara ini jika proses yang pertama gagal)
   
4. Parent and Child Processes
   Each unix process has two ID numbers assigned to it: The Process ID (pid) and
   the Parent process ID (ppid). Each user process in the system has a parent
   process.
   
   Most of the commands that you run have the shell as their parent. Check the 
   ps -f example where this command listed both the process ID and the parent
   process ID.
   
5. Zombie and Orphan Processes
   Normally, when a child process is killed, the parent process is updated via a
   SIGCHLD signal. Then the parent can do some other task or restart a new child
   as needed. However, sometimes the parent process is killed before its child is
   killed. In this case, the "parent of all processes," the init process, becomes
   the new PPID (parent process ID). In some cases, these processes are called
   orphan processes.
   
   When a process is killed, a ps listing may still show the process with a Z
   state. This is a zombie or defunct process. The process is dead and not being
   used. These processes are different from the orphan processes. They have
   completed execution but still find an entry in the process table.
   
6. Daemon Processess
   Daemons are system-related background processes that often run with the
   permissions of root and services requests from other processes.
   
   A daemon has no controlling terminal. It cannot open /dev/tty. 
   If you do a "ps -ef" and look at the tty field, all daemons will have a ? for
   the tty.
   
   To be precise, a daemon is a process that runs in the background, usually
   waiting for something to happen that it is capable of working with. For
   example, a printer daemon waiting for print commands.
   
   If you have a program that calls for lengthy processing, then itâ€™s worth to
   make it a daemon and run it in the background.
   
7. The top Command
   The top command is a very useful tool for quickly showing processes sorted by
   various criteria.
   
   It is an interactive diagnostic tool that updates frequently and shows
   information about physical and virtual memory, CPU usage, load averages, and
   your busy processes.
   
   Here is the simple syntax to run top command and to see the statistics of CPU
   utilization by different processes 
   Contoh :
   $ top
   
8. Job ID VS Process ID
   Background and suspended processes are usually manipulated via job number (job
   ID). This number is different from the process ID and is used because it is
   shorter.
   
   In addition, a job can consist of multiple processes running in a series or at
   the same time, in parallel. Using the job ID is easier than tracking
   individual processes.
