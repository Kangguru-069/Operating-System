The vi Editor

An improved version of the vi editor which is called the VIM has also been made available now. Here, VIM stands for Vi IMproved.

vi is generally considered the de facto standard in Unix editors because −
  - It's usually available on all the flavors of Unix system. 
  - Its implementations are very similar across the board.
  - It requires very few resources.
  - It is more user-friendly than other editors such as the ed or the ex.

You can use the vi editor to edit an existing file or to create a new file from scratch. You can also use this editor to just read a text file.

A. Starting The Vi Editor
   1. vi filename
      Creates a new file if it already exist, otherwise opens an existing file
   2. vi -R filename
      Opens an Existing file in the read-only mode
   3. view filename
      Opens an existing file in the read-only mode
   
   Syntax :
   $ vi hello.txt
   
B. Operation Modes
   - Commands (Command Line Cheat Sheet)
      
C. Moving within a File
   1. k = Moves the cursor up one line
   2. j = Moves the cursor down one line
   3. h = Moves the cursor to the left one character position
   4. l = Moves the cursor to the right one character position
   
   The following points need to be considered to move within a file −
   - vi is case-sensitive. You need to pay attention to capitalization when using
     the commands.
   - Most commands in vi can be prefaced by the number of times you want the
     action to occur. For example, 2j moves the cursor two lines down the cursor
     location.
   There are many other ways to move within a file in vi. Remember that you must
   be in the command mode (press Esc twice). 
   
D. Editing Files
   1. i = Inserts text before the current cursor location
   2. I = Inserts text at the beginning of the current line
   3. a = Inserts text after the current cursor location
   4. A = Inserts text at the end of the current line
   5. o = Creates a new line for text entry below the cursor location
   6. O = Creates a new line for text entry above the cursor location

E. Deleting Characters
   1. x  = Deletes the character under the cursor location
   2. X  = Deletes the character before the cursor location
   3. dw = Deletes from the current cursor location to the next word
   4. d^ = Deletes from the current cursor position to the beginning of the line
   5. d$ = Deletes from the current cursor position to the end of the line
   6. D  = Deletes from the cursor position to the end of the current line
   7. dd = Deletes the line the cursor is on
   Example: 2x deletes two characters under the cursor location and 2dd deletes
   two lines the cursor is on.

F. Change Commands
   1. cc = Removes the contents of the line, leaving you in insert mode.
   2. cw = Changes the word the cursor is on from the cursor to the lowercase w
           end of the word.
   3. r  = Replaces the character under the cursor. vi returns to the command mode
           after the replacement is entered.
   4. R  = Overwrites multiple characters beginning with the character currently
           under the cursor. You must use Esc to stop the overwriting.
   5. s  = Replaces the current character with the character you type. Afterward,
           you are left in the insert mode.
   6. S  = Deletes the line the cursor is on and replaces it with the new text.
           After the new text is entered, vi remains in the insert mode.
           
G. Copy and Paste Commands
   1. yy = copies the current line.
   2. yw = Copies the current word from the character the lowercase w cursor is
           on, until the end of the word.
   3. p  = Puts the copied text after the cursor.
   4. P  = Puts the yanked text before the cursor.  
   
H. Advanced Commands
   1. J  = Joins the current line with the next one. A count of j commands join
           many lines.
   2. << = Shifts the current line to the left by one shift width.
   3. >> = Shifts the current line to the right by one shift width.
   4. ~  = Switches the case of the character under the cursor.
   5. ^G = Press Ctrl and G keys at the same time to show the current filename
           and the status.
   6. U  = Restores the current line to the state it was in before the cursor
           entered the line.
   7. u  = This helps undo the last change that was done in the file. Typing 'u'
           again will re-do the change.
   8. J  = Joins the current line with the next one. A count joins that many
           lines.
   9. :f = Displays the current position in the file in % and the file name, the
           total number of file.
  10. :f filename = Renames the current file to filename.
  11. :w filename = Writes to file filename.
  12. :e filename = Opens another file with filename.
  13. :cd dirname = Changes the current working directory to dirname.
  14. :e #        = Toggles between two open files.
  15. :n          = In case you open multiple files using vi, use :n to go to the
                    next file in the series.
  16. :p          = In case you open multiple files using vi, use :p to go to the
                    previous file in the series.
  17. :N          = In case you open multiple files using vi, use :N to go to the
                    previous file in the series.
  18. :r file     = Reads file and inserts it after the current line.
  19. :nr file    = Reads file and inserts it after the line n.      
  
I. Word and Character Searching  
   These two commands differ only in the direction where the search takes place −
   - The / command searches forwards (downwards) in the file. 
   - The ? command searches backwards (upwards) in the file.
   The n and N commands repeat the previous search command in the same or the
   opposite direction, respectively. Some characters have special meanings. These
   characters must be preceded by a backslash (\) to be included as part of the
   search expression.
   1. ^ = Searches at the beginning of the line (Use at the beginning of a search
          expression).
   2. . = Matches a single character.
   3. * = Matches zero or more of the previous character.
   4. $ = End of the line (Use at the end of the search expression).
   5. [ = Starts a set of matching or non-matching expressions.
   6. < = This is put in an expression escaped with the backslash to find the
          ending or the beginning of a word.
   7. > = This helps see the '<' character description above.
   
J. Set Commands
   1. :set ic   = Ignores the case when searching
   2. :set ai   = Sets autoindent
   3. :set noai = Unsets autoindent
   4. :set nu   = Displays lines with line numbers on the left side
   5. :set sw   = Sets the width of a software tabstop. For example, you would
                  set a shift width of 4 with this command — :set sw = 4
   6. :set ws   = If wrapscan is set, and the word is not found at the bottom of
                  the file, it will try searching for it at the beginning
   7. :set wm   = If this option has a value greater than zero, the editor will
                  automatically "word wrap". For example, to set the wrap margin
                  to two characters, you would type this: :set wm = 2
   8. :set ro   = Changes file type to "read only"
   9. :set term = Prints terminal type
  10. :set bf   = Discards control characters from input
  
K. Running Commands
   The vi has the capability to run commands from within the editor. To run a
   command, you only need to go to the command mode and type :! command.
   
   For example, if you want to check whether a file exists before you try to save
   your file with that filename, you can type :! ls and you will see the output
   of ls on the screen.
   
   You can press any key (or the command's escape sequence) to return to your vi
   session.
   
L. Replacing Text
   The substitution command (:s/) enables you to quickly replace words or groups
   of words within your files. Following is the syntax to replace text −
   
   - :s/search/replace/g
   
   The g stands for globally. The result of this command is that all occurrences
   on the cursor's line are changed.

M. Important Points to Note
   The following points will add to your success with vi −
   
   You must be in command mode to use the commands. (Press Esc twice at any time
   to ensure that you are in command mode.)
   
   You must be careful with the commands. These are case-sensitive.
   You must be in insert mode to enter text.
