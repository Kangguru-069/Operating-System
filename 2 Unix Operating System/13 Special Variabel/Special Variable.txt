Variabel Special

Special variabel have a special function in Unix, we must be careful when we use certain nonalphanumeric characters in variable names.

Contoh :
echo $$  <--- Menampilkan PID(Process ID Number)

Special variables that you can use in shel scripts :
1. $0
   The filename of the current script.

2. $n
   These variables correspond to the arguments with which a script was invoked.
   Here n is a positive decimal number corresponding to the position of an
   argument (the first argument is $1, the second argument is $2, and so on).

3. $#
   The number of arguments supplied to a script.

4. $*
   All the arguments are double quoted. If a script receives two arguments, $* is
   equivalent to $1 $2.

5. $@
   All the arguments are individually double quoted. If a script receives two
   arguments, $@ is equivalent to $1 $2.

6. $?
   The exit status of the last command executed.

7. $$
   The process number of the current shell. For shell scripts, this is the process
   ID under which they are executing.

8. $!
   The process number of the last background command.
   
A. Command Line Arguments
   Command-line Arguments S1,$2,$3, ... ,$9 are positional parameter.
   Command-line Arguments $0 pointing to the actual command, program, shellscript
   or function.
   Contoh :
   #!/bin/sh

   echo "File Name: $0"
   echo "First Parameter : $1"
   echo "Second Parameter : $2"
   echo "Quoted Values: $@"
   echo "Quoted Values: $*"
   echo "Total Number of Parameters : $#"
   
B. Special Parameters $* and $@
   There are special parameters that allow accessing all the command-line
   arguments at once. 
   $* and $@ both will act the same unless they are enclosed in double quotes,
   "".   
   1. "$*" special parameter takes the entire list as one argument with spaces
      between
   2. "$@" special parameter takes the entire list and separates it into separate
      arguments.
      
   Contoh : 
   #!/bin/sh
   
   for A in $*
   do 
   	echo $A
   done
   
   Catatan : Do... Done is a kind of loop will be covered in a subsequent tutorial.

C. Exit Status 
   $? Variable ==> Exit status from previous command.
                   0 => Successfull
                   1 => Unsuccessfull
   Exit status is a numerical value returned by every command upon its completion.
   As a rule, most commands return an exit status of 0 if they were successful,
   and 1 if they were unsuccessful.
   
   Some commands return additional exit statuses for particular reasons. 
   For example, some commands differentiate between kinds of errors and will return
   various exit values depending on the specific type of failure.
   
   Contoh :
   $ ./file.sh A B C D E atau sh file.sh A B C D E 
   $ echo $?
     Output : 0 (Successfull)
     Output : 1 (Unsuccessfull)
