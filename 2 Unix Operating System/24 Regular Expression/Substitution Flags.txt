1. Substitution Flags
   There are a number of other useful flags that can be passed in addition to the
   g flag, and you can specify more than one at a time.
   1. g
      Replaces all matches, not just the first match
   2. NUMBER
      Replaces only NUMBERth match
   3. p
      If substitution was made, then prints the pattern space
   4. w FILENAME
      If substitution was made, then writes result to FILENAME
   5. I or i
      Matches in a case-insensitive manner
   6. M or m
      In addition to the normal behavior of the special regular expression
      characters ^ and $, this flag causes ^ to match the empty string after a
      newline and $ to match the empty string before a newline
   
2. Using an Alternative String Separator
   Suppose you have to do a substitution on a string that includes the forward
   slash character. In this case, you can specify a different separator by
   providing the designated character after the s.
     $ cat /etc/passwd | sed 's:/root:/vmsementara:g'
     vmsementara:x:0:0:vmsementara user:/vmsementara:/bin/sh
     daemon:x:1:1:daemon:/usr/sbin:/bin/sh
     
   In the above example, we have used : as the delimiter instead of slash / because
   we were trying to search /root instead of the simple root.
   
3. Replacing with empty Space
   Use an empty substitution string to delete the root string from the /etc/passwd
    $ cat /etc/passwd | sed 's/root//g'
    :x:0:0::/:/bin/sh
    daemon:x:1:1:daemon:/usr/sbin:/bin/sh
    
4. Address Substitution
   If you want to substitute the string sh with the string quiet only on line 10
   $ cat /etc/passwd | sed '10s/sh/quiet/g'
   root:x:0:0:root user:/root:/bin/sh
   daemon:x:1:1:daemon:/usr/sbin:/bin/sh
   bin:x:2:2:bin:/bin:/bin/sh
   sys:x:3:3:sys:/dev:/bin/sh
   sync:x:4:65534:sync:/bin:/bin/sync
   games:x:5:60:games:/usr/games:/bin/sh
   man:x:6:12:man:/var/cache/man:/bin/sh
   mail:x:8:8:mail:/var/mail:/bin/sh
   news:x:9:9:news:/var/spool/news:/bin/sh
   backup:x:34:34:backup:/var/backups:/bin/quiet
   
   Address Range Substitution
   $ cat /etc/passwd | sed '1,5s/sh/quiet/g'
   root:x:0:0:root user:/root:/bin/quiet
   daemon:x:1:1:daemon:/usr/sbin:/bin/quiet
   bin:x:2:2:bin:/bin:/bin/quiet
   sys:x:3:3:sys:/dev:/bin/quiet
   sync:x:4:65534:sync:/bin:/bin/sync
   games:x:5:60:games:/usr/games:/bin/sh
   man:x:6:12:man:/var/cache/man:/bin/sh
   mail:x:8:8:mail:/var/mail:/bin/sh
   news:x:9:9:news:/var/spool/news:/bin/sh
   backup:x:34:34:backup:/var/backups:/bin/sh
   
   As you can see from the output, the first five lines had the string sh changed
   to quiet, but the rest of the lines were left untouched.

5. The Matching Command
   You would use the p option along with the -n option to print all the matching
   lines
   $ cat testing | sed -n '/root/p'
   root:x:0:0:root user:/root:/bin/sh
   [root@ip-72-167-112-17 amrood]# vi testing
   root:x:0:0:root user:/root:/bin/sh
   daemon:x:1:1:daemon:/usr/sbin:/bin/sh
   bin:x:2:2:bin:/bin:/bin/sh
   sys:x:3:3:sys:/dev:/bin/sh
   sync:x:4:65534:sync:/bin:/bin/sync
   games:x:5:60:games:/usr/games:/bin/sh
   man:x:6:12:man:/var/cache/man:/bin/sh
   mail:x:8:8:mail:/var/mail:/bin/sh
   news:x:9:9:news:/var/spool/news:/bin/sh
   backup:x:34:34:backup:/var/backups:/bin/sh
   
6. Using Regular Expression
   While matching patterns, you can use the regular expression which provides more
   flexibility.

   Check the following example which matches all the lines starting with daemon
   and then deletes
   $ cat testing | sed '/^daemon/d'
   root:x:0:0:root user:/root:/bin/sh
   bin:x:2:2:bin:/bin:/bin/sh
   sys:x:3:3:sys:/dev:/bin/sh
   sync:x:4:65534:sync:/bin:/bin/sync
   games:x:5:60:games:/usr/games:/bin/sh
   man:x:6:12:man:/var/cache/man:/bin/sh
   mail:x:8:8:mail:/var/mail:/bin/sh
   news:x:9:9:news:/var/spool/news:/bin/sh
   backup:x:34:34:backup:/var/backups:/bin/sh
   
   example which deletes all the lines ending with sh\
   $ cat testing | sed '/sh$/d'
   sync:x:4:65534:sync:/bin:/bin/sync
   
   Table List Special Characters that are very useful in regular expressions.
   1. ^
      Matches the beginning of lines
   2. $
      Matches the end of lines
   3. .
      Matches any single character
   4. *
      Matches zero or more occurrences of the previous character
   5. [chars]
      Matches any one of the characters given in chars, where chars is a sequence
      of characters. You can use the - character to indicate a range of
      characters.
      
7. Matching Characters
   Look at a few more expressions to demonstrate the use of metacharacters.
   Table :
   1. /a.c/
      Matches lines that contain strings such as a+c, a-c, abc, match, and a3c
   2. /a*c/
      Matches the same strings along with strings such as ace, yacc, and arctic
   3. /[tT]he/
      Matches the string The and the
   4. /^$/
      Matches blank lines
   5. /^.*$/
      Matches an entire line whatever it is
   6. / */
      Matches one or more spaces
   7. /^$/
      Matches blank lines
      
   Table shows some frequently used sets of characters
   1. [a-z]
      Matches a single lowercase letter
   2. [A-Z]
      Matches a single uppercase letter
   3. [a-zA-Z]
      Matches a single letter
   4. [0-9]
      Matches a single number
   5. [a-zA-Z0-9]
      Matches a single letter or number
      
8. Character Class Keywords
   Some special keywords are commonly available to regexps, especially GNU
   utilities that employ regexps. These are very useful for sed regular
   expressions as they simplify things and enhance readability.
   
   For example, the characters a through z and the characters A through Z,
   constitute one such class of characters that has the keyword [[:alpha:]]
   
   Using the alphabet character class keyword, this command prints only those
   lines in the /etc/syslog.conf file that start with a letter of the alphabet
   
   $ cat /etc/syslog.conf | sed -n '/^[[:alpha:]]/p'
   authpriv.*                         /var/log/secure
   mail.*                             -/var/log/maillog
   cron.*                             /var/log/cron
   uucp,news.crit                     /var/log/spooler
   local7.*                           /var/log/boot.log
   
   The following table is a complete list of the available character class
   keywords in GNU sed.   
   1. [[:alnum:]]
      Alphanumeric [a-z A-Z 0-9]
   2. [[:alpha:]]
      Alphabetic [a-z A-Z]
   3. [[:blank:]]
      Blank characters (spaces or tabs)
   4. [[:cntrl:]]
      Control characters
   5. [[:digit:]]
      Numbers [0-9]
   6. [[:graph:]]
      Any visible characters (excludes whitespace)
   7. [[:lower:]]
      Lowercase letters [a-z]
   8. [[:print:]]
      Printable characters (non-control characters)
   9. [[:punct:]]
      Punctuation characters
  10. [[:space:]]
      Whitespace 
  11. [[:upper:]]
      Uppercase letters [A-Z]
  12. [[:xdigit:]]
      Hex digits [0-9 a-f A-F]
      
9. Aampersand Referencing
   The sed metacharacter & represents the contents of the pattern that was
   matched.
   file.txt
   1111111111
   2222222222 
   You want to make the area code (the first three digits) surrounded by
   parentheses for easier reading. To do this, you can use the ampersand
   replacement character
   Example :
   $ sed -e 's/^[[:digit:]][[:digit:]][[:digit:]]/(&)/g' file.txt
   Output :
   (111)1111111
   (222)2222222  
   
10. Using Multiple sed Commands
    Syntax :
    $ sed -e 'command1' -e 'command2' ... -e 'commandN' files
    
    Example :
    $ sed -e 's/^[[:digit:]]\{3\}/(&)/g'  \ 
   -e 's/)[[:digit:]]\{3\}/&-/g' phone.txt 
   (111)111-1111 
   (222)222-2222 
   
   NOTE :
   In the above example, instead of repeating the character class keyword
   [[:digit:]] three times, we replaced it with \{3\}, which means the preceding
   regular expression is matched three times. We have also used \ to give line
   break and this has to be removed before the command is run.
   
11. Back References
    The ampersand metacharacter is useful, but even more useful is the ability to
    define specific regions in regular expressions. These special regions can be
    used as reference in your replacement strings. By defining specific parts of
    a regular expression, you can then refer back to those parts with a special
    reference character.
    
    To do back references, you have to first define a region and then refer back
    to that region. To define a region, you insert backslashed parentheses around
    each region of interest. The first region that you surround with backslashes
    is then referenced by \1, the second region by \2, and so on.

    File.txt
    (111)111-1111
    (222)222-2222
   
    Example :
    $ cat phone.txt | sed 's/\(.*)\)\(.*-\)\(.*$\)/Area \ 
    code: \1 Second: \2 Third: \3/' 
    Area code: (111) Second: 111- Third: 1111 
    Area code: (222) Second: 222- Third: 2222 

    NOTE :
    In the above example, each regular expression inside the parenthesis would be
    back referenced by \1, \2 and so on. We have used \ to give line break here
    This should be removed before running the command.
